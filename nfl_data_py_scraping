{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0c77669",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### imports, general functions, save/read-in data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1f050d3",
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false,
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# imports and installs\n",
    "try :\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as plt\n",
    "    from simple_colors import * # for printing in red when debugging\n",
    "    import nfl_data_py as nfl #\n",
    "\n",
    "    # import itertools # \n",
    "    # from difflib import SequenceMatcher # string similarity\n",
    "    # import string # for \n",
    "    # from nba_api.stats.endpoints import playbyplayv2, scoreboard\n",
    "    # import requests\n",
    "    import warnings\n",
    "    import os\n",
    "    import time\n",
    "    import sys\n",
    "    \n",
    "except Exception as e : print(red(e))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23dc2f8a",
   "metadata": {
    "code_folding": [
     0,
     7,
     17
    ],
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# online functions ; display_side_by_side & similar\n",
    "# turn 1 to 1st, 2 to 2nd, etc.\n",
    "ordinal = lambda n: \"%d%s\" % (n,\"tsnrhtdd\"[(n//10%10!=1)*(n%10<4)*n%10::4])\n",
    "\n",
    "# define display_side_by_side(df1,df2, titles) side-by side\n",
    "from IPython.display import display_html\n",
    "from itertools import chain,cycle\n",
    "def display_side_by_side(*args,titles=cycle([''])):\n",
    "    html_str=''\n",
    "    for df,title in zip(args, chain(titles,cycle(['</br>'])) ):\n",
    "        html_str+='<th style=\"text-align:center\"><td style=\"vertical-align:top\">'\n",
    "        html_str+=f'<h2>{title}</h2>'\n",
    "        html_str+=df.to_html().replace('table','table style=\"display:inline\"')\n",
    "        html_str+='</td></th>'\n",
    "    display_html(html_str,raw=True)\n",
    "    \n",
    "# def similar(a, b):\n",
    "def similar(a, b):\n",
    "    return SequenceMatcher(None, a, b).ratio()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a6eaeb0",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 25)\n",
    "pd.set_option('display.max_rows', 5)\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b1aebe9",
   "metadata": {
    "deletable": false,
    "editable": false,
    "hidden": true,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "def function_template():\n",
    "    # get function data\"\n",
    "    function_name = sys._getframe().f_code.co_name ; start = time.time() ; \n",
    "    try : \n",
    "        print(deez)\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')\n",
    "    stop = time.time() ; duration = stop-start ; "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b5f3863",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### read in & save play-by-play ; only necessary to run once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61c82f27",
   "metadata": {
    "code_folding": [
     0,
     1,
     7,
     34
    ],
    "deletable": false,
    "editable": false,
    "hidden": true,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "# def read_and_save_data():\n",
    "def read_and_save_data():\n",
    "    create_save_dfs()\n",
    "    \n",
    "# def create_save_dfs():\n",
    "# input : N/A, just one time run to import in data\n",
    "# output : N/A, read in data from nfl.import functions and save to appropriate folders\n",
    "def create_save_dfs():\n",
    "    warnings.filterwarnings('ignore')   \n",
    "    # prepare years to loop through\n",
    "    ystart = 2000 ; yend = 2024\n",
    "    years = np.linspace(ystart,yend, yend-ystart+1, dtype = int)\n",
    "\n",
    "    sp = r\"C:\\Users\\Rafal Adamczyk\\Documents\\portfolio projects\\(2)_NFL\"\n",
    "    # loop through recent years and save to dataframe\n",
    "    for y in years:\n",
    "        # run nfl.import functions for relevant data\n",
    "        try : \n",
    "            # create savepath to specific year\n",
    "            savepath = sp + \"\\\\\" + str(y)\n",
    "            # get relevant data\n",
    "            yearly_dfs[ f\"data_{y}\" ] = {f\"pbp_{y}\" : nfl.import_pbp_data([y]),\n",
    "                                         f\"players_{y}\" : nfl.import_rosters([y]),\n",
    "                                         f\"teams_{y}\" : nfl.import_team_desc() } \n",
    "            # save to folder to read in quicker rather than importing\n",
    "            save_to_path(yearly_dfs[ f\"data_{y}\" ], savepath)\n",
    "            print(f'Data from {y} saved.')\n",
    "        except Exception as e: print(f'Error in create_save_dfs() ; {e}')\n",
    "    warnings.filterwarnings('default')\n",
    "    \n",
    "# def save_to_paxth(dict_y, savepath):\n",
    "# input dict_y : (dict) dict of relvant dfs for appropriate year ; yearly_dfs[ f\"data_{y}\" ] in create_save_dfs()\n",
    "# input savepath : (str) path to folder to create yearly NFL folders and save data\n",
    "# output : N/A, just save dataframes to file directory\n",
    "def save_to_path(dict_y, savepath):\n",
    "    # check if path exists and is a directory (folder)\n",
    "    e = os.path.exists(savepath)\n",
    "    f = os.path.isdir(savepath)\n",
    "    # if folder already exists, save in relevant dataframes\n",
    "    if (e) & (f):\n",
    "        folder = savepath + \"\\\\\"\n",
    "        for key,val in dict_y.items() :\n",
    "            val.to_csv(folder + key + \".csv\")                \n",
    "    # if proper folders don't exist, create them and rerun function to save dfs in there\n",
    "    else :\n",
    "        os.makedirs(savepath)\n",
    "        return save_to_path(exdf, savepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7e954e3",
   "metadata": {
    "deletable": false,
    "editable": false,
    "hidden": true,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "read_and_save_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3568037e",
   "metadata": {},
   "source": [
    "### scrape player performance week-to-week per season\n",
    "Goals :\n",
    "Try to predict week n performance, try models such as week n-1 performance, week n-1 and week n-2, different weights etc.\n",
    "Use current team's record as indication of \"confidence\"?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81f9836c",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46b2d17b",
   "metadata": {
    "code_folding": [
     1
    ],
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# set up pos_col\n",
    "pass_col = ['play_type','yards_gained','pass_length','pass_location','yards_after_catch','incomplete_pass',\n",
    "            'interception','rush_attempt','pass_attempt','touchdown','pass_touchdown','rush_touchdown',\n",
    "            'return_touchdown','fumble','complete_pass','passer_player_id','passer_player_name','passing_yards',\n",
    "            'receiver_player_id','weather','sack','receiving_yards','drive_ended_with_score','roof','surface',\n",
    "            'game_stadium','ydstogo','passer','passer_id','defenders_in_box','fourth_down_failed',\n",
    "            'first_down','penalty','penalty_type','spread_line','total_line','posteam', 'week', \n",
    "            'home_opening_kickoff','first_down_rush','rush_attempt','rush_touchdown','lateral_rush',\n",
    "            'rusher_player_id','rusher_player_name','rushing_yards','lateral_rusher_player_id',\n",
    "            'lateral_rusher_player_name','lateral_rushing_yards','rusher','rusher_jersey_number',\n",
    "            'rush','rusher_id','number_of_pass_rushers', 'pass_oe']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "712d5187",
   "metadata": {
    "code_folding": [
     4,
     6
    ],
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# def data_per_year(first, last):    \n",
    "# input first : (int) the first year to begin tracking data from (track first-1 to have previous year's averages)\n",
    "# input last : (int) the last year to begin tracking data to\n",
    "# output yearlydfs : (dict) with key=year, values=dfs\n",
    "def data_per_year(first = 2016, last = 2022):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    try : \n",
    "        yrs = np.linspace(first-1, last, last-first+2, dtype = int)\n",
    "        yearlydfs = {}\n",
    "        # populate yearlydfs by reading in files and cleaning pbp file\n",
    "        for yr in yrs :\n",
    "            directory = r'C:\\Users\\Rafal Adamczyk\\Documents\\portfolio projects\\(2)_NFL\\\\' + f'{yr}' + r'\\\\'\n",
    "            # loop through file explorer saved files (took an hour to save all originally)\n",
    "            for root, dirs, files in os.walk(directory):\n",
    "                # read in files\n",
    "                for data in files:\n",
    "                    if \"pbp\" in data:\n",
    "                        pbp = pd.read_csv(directory + data)\n",
    "                    elif \"players\" in data:\n",
    "                        players = pd.read_csv(directory + data)\n",
    "                    elif \"teams\" in data:\n",
    "                        teams = pd.read_csv(directory + data)\n",
    "            # remove unnecessary columns from pbp\n",
    "            pbptemp = [col for col in pbp.columns if 'wpa' not in col]\n",
    "            pbptemp = [col for col in pbptemp if 'epa' not in col]\n",
    "            pbptemp = [col for col in pbptemp if 'vegas' not in col]\n",
    "            pbptemp = [col for col in pbptemp if not col.endswith('prob')]\n",
    "            pbp_yr = pbp[pbptemp]\n",
    "            # populate dictionary\n",
    "            yearlydfs[yr] = [pbp , players , teams]  \n",
    "        return yearlydfs\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')\n",
    "yearlydfs = data_per_year()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47ec70c2",
   "metadata": {},
   "source": [
    "### https://www.espn.com/nfl/player/gamelog/_/id/8439/aaron-rodgers \n",
    "##### get QB stats to mimic ESPN's stats ; working (95% ; some weeks have +-1 completion in comparison to ESPN)\n",
    "##### for year y (2022), get year y-1's (2021) average per season\n",
    "##### for year y (2022), get year y-1's (2021) averages against the same team last year\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e61d8983",
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# def filter_by_player(df, pid, pos_col): output pid_plays\n",
    "# input df : (pd.df) df pf yearly pbp data to filter through\n",
    "# input pid : (str) player_id\n",
    "# input pos_col : (list) pass_col, rec_col, kick_col, etc.\n",
    "# output pid_plays : (pd.df) all plays where inputted pid is involved\n",
    "def filter_by_player(df, pid, pos_col):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    try : \n",
    "        # get rows where inputted df has the player's id 'pid' in a column/row element\n",
    "        pid_plays = df[df.apply(lambda x: any(value == pid for value in x.values), axis=1)]\n",
    "        # prepare df with summary of stats for pid for each week of season x\n",
    "        pid_byweek = pd.DataFrame(columns = pos_col)\n",
    "        return pid_plays\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d73b534",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# for each year, get seasonly data on player & week-by-week\n",
    "for key, values in yearlydfs.items():\n",
    "    if key > 2021:\n",
    "        print(key)\n",
    "        display( yearlydfs[key-1][0].head(1) )\n",
    "        display( yearlydfs[key][0].head(1) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9276a2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pid_plays = filter_by_player(pbp_yr, '00-0023459', pass_col) # aaron rodgers            \n",
    "# pid_plays = filter_by_player(pbp_yr, '00-0033873', pass_col) # mahomes            \n",
    "# pid_plays = filter_by_player(pbp_yr, '00-0034857', pass_col) # josh allen           \n",
    "# get week-to-week stats\n",
    "player_weekbyweek( pid_plays , pass_col )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be69bdb2",
   "metadata": {
    "code_folding": [
     49
    ],
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# def player_weekbyweek(pid_plays, pass_col):\n",
    "# input pid_plays : (pd.df) filter_by_player() output\n",
    "# inputs pass_col : (list) list of columns relevant to QB\n",
    "# def player_weekbyweek(pid_plays, pass_col):\n",
    "def player_weekbyweek(pid_plays, pass_col):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    try : \n",
    "        # get list of weeks where player played\n",
    "        rel_weeks = np.linspace(1,np.max(pid_plays.week),np.max(pid_plays.week), dtype=int)\n",
    "        for w in rel_weeks:\n",
    "            # get all plays involving player on week w\n",
    "            pid_week = pid_plays[pid_plays.week == w]\n",
    "            print( red(w) )\n",
    "\n",
    "            # get same stats as ESPN website\n",
    "            cmp = np.sum(pid_week.complete_pass) #GOOD\n",
    "            patt = np.sum(pid_week.pass_attempt.values) #DIFFERENT\n",
    "            pyrd = np.sum(pid_week.passing_yards.fillna(0).values) #GOOD\n",
    "            cmp_pct = cmp/patt*100 #DIFFERENT\n",
    "            pavg = pyrd/patt #DIFFERENT\n",
    "            ptd = np.sum(pid_week.pass_touchdown.values) #GOOD\n",
    "            interception = np.sum(pid_week.interception.values) #GOOD\n",
    "            plng = np.max(pid_week.passing_yards.fillna(0).values) #GOOD\n",
    "            sack = np.sum(pid_week.sack.fillna(0).values) #GOOD\n",
    "            ratt = np.sum(pid_week.rush_attempt.values) #GOOD\n",
    "            ryrd = np.sum(pid_week.rushing_yards.fillna(0).values) #GOOD\n",
    "            ravg = ryrd/ratt #DIFFERENT\n",
    "            rtd = np.sum(pid_week.rush_touchdown.values) #GOOD\n",
    "            rlng = np.max(pid_week.rushing_yards.fillna(0).values) #GOOD\n",
    "            # get yards gained            \n",
    "            yg = np.sum( np.abs(pid_week.yards_gained.values) )\n",
    "            # replace nans with 0's to sum properly ; YAC relevant to receivers, not QB necessarily\n",
    "            yac = np.sum(pid_week.yards_after_catch.fillna(0).values)\n",
    "            \n",
    "            print( f'ESPN cmp : {cmp}' )\n",
    "            print( f'ESPN att : {patt}' )\n",
    "            print( f'ESPN yds : {pyrd}' )\n",
    "            print( f'ESPN cmp% : {cmp_pct}' )\n",
    "            print( f'ESPN avg : {pavg}' )\n",
    "            print( f'ESPN td (pass): {ptd}' )\n",
    "            print( f'ESPN int : {interception}' )\n",
    "            print( f'ESPN lng : {plng}' )\n",
    "            print( f'ESPN sack : {sack}' )\n",
    "            \n",
    "            print( f'ESPN car : {ratt}' )\n",
    "            print( f'ESPN yds (rush) : {ryrd}' )\n",
    "            print( f'ESPN avg (rush) : {ravg}' )\n",
    "            print( f'ESPN td (rush) : {rtd}' )\n",
    "            print( f'ESPN lng (rush) : {rlng}' )\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        cmp = np.nan ; patt = np.nan ; pyrd = np.nan ; cmp_pct = np.nan ; pavg = np.nan;\n",
    "        ptd = np.nan ; interception = np.nan ; plng = np.nan ; sack = np.nan ; ratt = np.nan;\n",
    "        ryrd = np.nan ; ravg = np.nan ; rtd = np.nan ; rlng = np.nan ;\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af82c60d",
   "metadata": {
    "code_folding": [
     0,
     4,
     11
    ],
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "# def player_seasonly_avg(yearlydfs, pid, pos_col):\n",
    "# input pid_plays : (pd.df) filter_by_player() output\n",
    "# input pid : (str) player_id\n",
    "# input pos_col : (list) pass_col, rec_col, kick_col, etc.\n",
    "def player_seasonly_avg(yearlydfs, pid, pos_col):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    try :         \n",
    "        # read in pbp & players datasets\n",
    "        # read in 2022 data\n",
    "\n",
    "\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de98c5d1",
   "metadata": {
    "code_folding": [
     0,
     4,
     7,
     28
    ],
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# def create_player_season_avg(pid_plays, pass_col):\n",
    "# input pid_plays : (pd.df) filter_by_player() output\n",
    "# inputs pass_col : (list) list of columns relevant to QB\n",
    "# def player_weekbyweek(pid_plays, pass_col):\n",
    "def create_player_season_avg(pid_plays, pass_col):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    \n",
    "    try : \n",
    "        # sum stats over weeks played\n",
    "        # get same stats as ESPN website\n",
    "        cmp = np.sum(pid_plays.complete_pass) #GOOD\n",
    "        patt = np.sum(pid_plays.pass_attempt.values) #DIFFERENT\n",
    "        pyrd = np.sum(pid_plays.passing_yards.fillna(0).values) #GOOD\n",
    "        cmp_pct = cmp/patt*100 #DIFFERENT\n",
    "        pavg = pyrd/patt #DIFFERENT\n",
    "        ptd = np.sum(pid_plays.pass_touchdown.values) #GOOD\n",
    "        interception = np.sum(pid_plays.interception.values) #GOOD\n",
    "        plng = np.max(pid_plays.passing_yards.fillna(0).values) #GOOD\n",
    "        sack = np.sum(pid_plays.sack.fillna(0).values) #GOOD\n",
    "        ratt = np.sum(pid_plays.rush_attempt.values) #GOOD\n",
    "        ryrd = np.sum(pid_plays.rushing_yards.fillna(0).values) #GOOD\n",
    "        ravg = ryrd/ratt #DIFFERENT\n",
    "        rtd = np.sum(pid_plays.rush_touchdown.values) #GOOD\n",
    "        rlng = np.max(pid_plays.rushing_yards.fillna(0).values) #GOOD\n",
    "        # get yards gained            \n",
    "        yg = np.sum( np.abs(pid_plays.yards_gained.values) )\n",
    "        # replace nans with 0's to sum properly ; YAC relevant to receivers, not QB necessarily\n",
    "        yac = np.sum(pid_plays.yards_after_catch.fillna(0).values)\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        cmp = np.nan ; patt = np.nan ; pyrd = np.nan ; cmp_pct = np.nan ; pavg = np.nan;\n",
    "        ptd = np.nan ; interception = np.nan ; plng = np.nan ; sack = np.nan ; ratt = np.nan;\n",
    "        ryrd = np.nan ; ravg = np.nan ; rtd = np.nan ; rlng = np.nan ;\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')\n",
    "            \n",
    "# aaron rodgers            \n",
    "# pid_plays = filter_by_player(pbp_yr, '00-0023459', pass_col)\n",
    "# pid_plays_yr_b4 = filter_by_player(pbp_yr, '00-0023459', pass_col)\n",
    "\n",
    "# filter_by_player(pbp,'00-0036222',pass_col) \n",
    "# ex1 with Aaron Rodgers ; ex2 with Isaiah Rodgers\n",
    "# player_season_avg( pid_plays_yr_b4 , pass_col )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61bca5ba",
   "metadata": {
    "code_folding": [
     0
    ],
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# # print all colymns\n",
    "# for c in pbp.columns:\n",
    "#     print(c, end = '   ;   ')\n",
    "# for row in pbp.tail(1).iloc:\n",
    "#     # 300 column and dozens of NaN's ; remove all when trying to learn df\n",
    "#     # display row by row neatly \n",
    "#     row = pd.DataFrame(row).transpose()\n",
    "#     display(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d06c2f59",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
