{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0c77669",
   "metadata": {},
   "source": [
    "### imports, general functions, save/read-in data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1f050d3",
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "# imports and installs\n",
    "try :\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as plt\n",
    "    from simple_colors import * # for printing in red when debugging\n",
    "    import nfl_data_py as nfl #\n",
    "\n",
    "    # import itertools # \n",
    "    # from difflib import SequenceMatcher # string similarity\n",
    "    # import string # for \n",
    "    # from nba_api.stats.endpoints import playbyplayv2, scoreboard\n",
    "    # import requests\n",
    "    import warnings\n",
    "    import os\n",
    "    \n",
    "except Exception as e : print(red(e))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23dc2f8a",
   "metadata": {
    "code_folding": [
     0,
     7,
     17
    ]
   },
   "outputs": [],
   "source": [
    "# online functions ; display_side_by_side & similar\n",
    "# turn 1 to 1st, 2 to 2nd, etc.\n",
    "ordinal = lambda n: \"%d%s\" % (n,\"tsnrhtdd\"[(n//10%10!=1)*(n%10<4)*n%10::4])\n",
    "\n",
    "# define display_side_by_side(df1,df2, titles) side-by side\n",
    "from IPython.display import display_html\n",
    "from itertools import chain,cycle\n",
    "def display_side_by_side(*args,titles=cycle([''])):\n",
    "    html_str=''\n",
    "    for df,title in zip(args, chain(titles,cycle(['</br>'])) ):\n",
    "        html_str+='<th style=\"text-align:center\"><td style=\"vertical-align:top\">'\n",
    "        html_str+=f'<h2>{title}</h2>'\n",
    "        html_str+=df.to_html().replace('table','table style=\"display:inline\"')\n",
    "        html_str+='</td></th>'\n",
    "    display_html(html_str,raw=True)\n",
    "    \n",
    "# def similar(a, b):\n",
    "def similar(a, b):\n",
    "    return SequenceMatcher(None, a, b).ratio()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b5f3863",
   "metadata": {},
   "source": [
    "### play-by-play ; disregard for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61c82f27",
   "metadata": {
    "code_folding": [
     1,
     7,
     34
    ],
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "# def read_and_save_data():\n",
    "def read_and_save_data():\n",
    "    create_save_dfs()\n",
    "    \n",
    "# def create_save_dfs():\n",
    "# input : N/A, just one time run to import in data\n",
    "# output : N/A, read in data from nfl.import functions and save to appropriate folders\n",
    "def create_save_dfs():\n",
    "    warnings.filterwarnings('ignore')   \n",
    "    # prepare years to loop through\n",
    "    ystart = 2000 ; yend = 2024\n",
    "    years = np.linspace(ystart,yend, yend-ystart+1, dtype = int)\n",
    "\n",
    "    sp = r\"C:\\Users\\Rafal Adamczyk\\Documents\\portfolio projects\\(2)_NFL\"\n",
    "    # loop through recent years and save to dataframe\n",
    "    for y in years:\n",
    "        # run nfl.import functions for relevant data\n",
    "        try : \n",
    "            # create savepath to specific year\n",
    "            savepath = sp + \"\\\\\" + str(y)\n",
    "            # get relevant data\n",
    "            yearly_dfs[ f\"data_{y}\" ] = {f\"pbp_{y}\" : nfl.import_pbp_data([y]),\n",
    "                                         f\"players_{y}\" : nfl.import_rosters([y]),\n",
    "                                         f\"teams_{y}\" : nfl.import_team_desc() } \n",
    "            # save to folder to read in quicker rather than importing\n",
    "            save_to_path(yearly_dfs[ f\"data_{y}\" ], savepath)\n",
    "            print(f'Data from {y} saved.')\n",
    "        except Exception as e: print(f'Error in create_save_dfs() ; {e}')\n",
    "    warnings.filterwarnings('default')\n",
    "    \n",
    "# def save_to_paxth(dict_y, savepath):\n",
    "# input dict_y : (dict) dict of relvant dfs for appropriate year ; yearly_dfs[ f\"data_{y}\" ] in create_save_dfs()\n",
    "# input savepath : (str) path to folder to create yearly NFL folders and save data\n",
    "# output : N/A, just save dataframes to file directory\n",
    "def save_to_path(dict_y, savepath):\n",
    "    # check if path exists and is a directory (folder)\n",
    "    e = os.path.exists(savepath)\n",
    "    f = os.path.isdir(savepath)\n",
    "    # if folder already exists, save in relevant dataframes\n",
    "    if (e) & (f):\n",
    "        folder = savepath + \"\\\\\"\n",
    "        for key,val in dict_y.items() :\n",
    "            val.to_csv(folder + key + \".csv\")                \n",
    "    # if proper folders don't exist, create them and rerun function to save dfs in there\n",
    "    else :\n",
    "        os.makedirs(savepath)\n",
    "        return save_to_path(exdf, savepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7e954e3",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "read_and_save_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3568037e",
   "metadata": {},
   "source": [
    "### player performance week-to-week per season\n",
    "Goals :\n",
    "Try to predict week n performance, try models such as week n-1 performance, week n-1 and week n-2, different weights etc.\n",
    "Use current team's record as indication of \"confidence\"?\n",
    "#### Important columns\n",
    "posteam (team on offense)\n",
    "\n",
    "desc (description of play)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6414f70a",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2db49a7",
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "# play-by-play code ; complex to start with but fuck it we ball\n",
    "# read in 2022 data\n",
    "directory = r'C:\\Users\\Rafal Adamczyk\\Documents\\portfolio projects\\(2)_NFL\\2022\\\\'\n",
    "for root, dirs, files in os.walk(directory):\n",
    "    for data in files:\n",
    "        if \"pbp\" in data:\n",
    "            pbp = pd.read_csv(directory + data)\n",
    "        elif \"players\" in data:\n",
    "            players = pd.read_csv(directory + data)\n",
    "        elif \"teams\" in data:\n",
    "            teams = pd.read_csv(directory + data)\n",
    "pbptemp = [col for col in pbp.columns if 'wpa' not in col]\n",
    "pbptemp = [col for col in pbptemp if 'epa' not in col]\n",
    "pbptemp = [col for col in pbptemp if 'vegas' not in col]\n",
    "pbp = pbp[pbptemp]\n",
    "\n",
    "games2022 = dict(tuple(pbp.groupby('game_id')))\n",
    "\n",
    "# example game to look through\n",
    "pd.unique( pbp.game_id )[16]\n",
    "games2022['2022_02_ARI_LV'].tail(1)\n",
    "\n",
    "for column in pbp.columns:\n",
    "    print(column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61bca5ba",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "for row in pbp.tail(50).iloc:\n",
    "    # 300 column and dozens of NaN's ; remove all when trying to learn df\n",
    "    row = row.dropna()\n",
    "    # display neatly \n",
    "    row = pd.DataFrame(row).transpose()\n",
    "    display( row )\n",
    "#     print( red(row.posteam.values[0]) ,row.desc.values[0] )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8a6833f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
