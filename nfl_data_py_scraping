{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0c77669",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### imports, general functions, save/read-in data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1f050d3",
   "metadata": {
    "code_folding": [
     1
    ],
    "deletable": false,
    "editable": false,
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# imports and installs\n",
    "try :\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as plt\n",
    "    from simple_colors import * # for printing in red when debugging\n",
    "    import nfl_data_py as nfl #\n",
    "\n",
    "    # import itertools # \n",
    "    # from difflib import SequenceMatcher # string similarity\n",
    "    # import string # for \n",
    "    # from nba_api.stats.endpoints import playbyplayv2, scoreboard\n",
    "    # import requests\n",
    "    import warnings\n",
    "    import os\n",
    "    import time\n",
    "    import sys\n",
    "    \n",
    "except Exception as e : print(red(e))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23dc2f8a",
   "metadata": {
    "code_folding": [
     0,
     7,
     17
    ],
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# online functions ; display_side_by_side & similar\n",
    "# turn 1 to 1st, 2 to 2nd, etc.\n",
    "ordinal = lambda n: \"%d%s\" % (n,\"tsnrhtdd\"[(n//10%10!=1)*(n%10<4)*n%10::4])\n",
    "\n",
    "# define display_side_by_side(df1,df2, titles) side-by side\n",
    "from IPython.display import display_html\n",
    "from itertools import chain,cycle\n",
    "def display_side_by_side(*args,titles=cycle([''])):\n",
    "    html_str=''\n",
    "    for df,title in zip(args, chain(titles,cycle(['</br>'])) ):\n",
    "        html_str+='<th style=\"text-align:center\"><td style=\"vertical-align:top\">'\n",
    "        html_str+=f'<h2>{title}</h2>'\n",
    "        html_str+=df.to_html().replace('table','table style=\"display:inline\"')\n",
    "        html_str+='</td></th>'\n",
    "    display_html(html_str,raw=True)\n",
    "    \n",
    "# def similar(a, b):\n",
    "def similar(a, b):\n",
    "    return SequenceMatcher(None, a, b).ratio()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a6eaeb0",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 25)\n",
    "pd.set_option('display.max_rows', 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b1aebe9",
   "metadata": {
    "deletable": false,
    "editable": false,
    "hidden": true,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "def function_template():\n",
    "    # get function data\"\n",
    "    function_name = sys._getframe().f_code.co_name ; start = time.time() ; \n",
    "    try : \n",
    "        print(deez)\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')\n",
    "    stop = time.time() ; duration = stop-start ; "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b5f3863",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### play-by-play ; disregard for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61c82f27",
   "metadata": {
    "code_folding": [
     1,
     7,
     34
    ],
    "deletable": false,
    "editable": false,
    "hidden": true,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "# def read_and_save_data():\n",
    "def read_and_save_data():\n",
    "    create_save_dfs()\n",
    "    \n",
    "# def create_save_dfs():\n",
    "# input : N/A, just one time run to import in data\n",
    "# output : N/A, read in data from nfl.import functions and save to appropriate folders\n",
    "def create_save_dfs():\n",
    "    warnings.filterwarnings('ignore')   \n",
    "    # prepare years to loop through\n",
    "    ystart = 2000 ; yend = 2024\n",
    "    years = np.linspace(ystart,yend, yend-ystart+1, dtype = int)\n",
    "\n",
    "    sp = r\"C:\\Users\\Rafal Adamczyk\\Documents\\portfolio projects\\(2)_NFL\"\n",
    "    # loop through recent years and save to dataframe\n",
    "    for y in years:\n",
    "        # run nfl.import functions for relevant data\n",
    "        try : \n",
    "            # create savepath to specific year\n",
    "            savepath = sp + \"\\\\\" + str(y)\n",
    "            # get relevant data\n",
    "            yearly_dfs[ f\"data_{y}\" ] = {f\"pbp_{y}\" : nfl.import_pbp_data([y]),\n",
    "                                         f\"players_{y}\" : nfl.import_rosters([y]),\n",
    "                                         f\"teams_{y}\" : nfl.import_team_desc() } \n",
    "            # save to folder to read in quicker rather than importing\n",
    "            save_to_path(yearly_dfs[ f\"data_{y}\" ], savepath)\n",
    "            print(f'Data from {y} saved.')\n",
    "        except Exception as e: print(f'Error in create_save_dfs() ; {e}')\n",
    "    warnings.filterwarnings('default')\n",
    "    \n",
    "# def save_to_paxth(dict_y, savepath):\n",
    "# input dict_y : (dict) dict of relvant dfs for appropriate year ; yearly_dfs[ f\"data_{y}\" ] in create_save_dfs()\n",
    "# input savepath : (str) path to folder to create yearly NFL folders and save data\n",
    "# output : N/A, just save dataframes to file directory\n",
    "def save_to_path(dict_y, savepath):\n",
    "    # check if path exists and is a directory (folder)\n",
    "    e = os.path.exists(savepath)\n",
    "    f = os.path.isdir(savepath)\n",
    "    # if folder already exists, save in relevant dataframes\n",
    "    if (e) & (f):\n",
    "        folder = savepath + \"\\\\\"\n",
    "        for key,val in dict_y.items() :\n",
    "            val.to_csv(folder + key + \".csv\")                \n",
    "    # if proper folders don't exist, create them and rerun function to save dfs in there\n",
    "    else :\n",
    "        os.makedirs(savepath)\n",
    "        return save_to_path(exdf, savepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7e954e3",
   "metadata": {
    "deletable": false,
    "editable": false,
    "hidden": true,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "read_and_save_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc87d9c4",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3568037e",
   "metadata": {},
   "source": [
    "### player performance week-to-week per season\n",
    "Goals :\n",
    "Try to predict week n performance, try models such as week n-1 performance, week n-1 and week n-2, different weights etc.\n",
    "Use current team's record as indication of \"confidence\"?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2db49a7",
   "metadata": {
    "code_folding": [
     4
    ],
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# read in pbp & players datasets\n",
    "# read in 2022 data\n",
    "directory = r'C:\\Users\\Rafal Adamczyk\\Documents\\portfolio projects\\(2)_NFL\\2022\\\\'\n",
    "for root, dirs, files in os.walk(directory):\n",
    "    for data in files:\n",
    "        if \"pbp\" in data:\n",
    "            pbp = pd.read_csv(directory + data)\n",
    "        elif \"players\" in data:\n",
    "            players = pd.read_csv(directory + data)\n",
    "        elif \"teams\" in data:\n",
    "            teams = pd.read_csv(directory + data)\n",
    "# remove unnecessary columns\n",
    "pbptemp = [col for col in pbp.columns if 'wpa' not in col]\n",
    "pbptemp = [col for col in pbptemp if 'epa' not in col]\n",
    "pbptemp = [col for col in pbptemp if 'vegas' not in col]\n",
    "pbptemp = [col for col in pbptemp if not col.endswith('prob')]\n",
    "pbp = pbp[pbptemp]\n",
    "\n",
    "games2022 = dict(tuple(pbp.groupby('game_id')))\n",
    "\n",
    "# pick example game to look through\n",
    "pd.unique( pbp.game_id )[16]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "46b2d17b",
   "metadata": {
    "code_folding": [
     7
    ]
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>depth_chart_position</th>\n",
       "      <th>years_exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>962</th>\n",
       "      <td>00-0023459</td>\n",
       "      <td>Aaron</td>\n",
       "      <td>Rodgers</td>\n",
       "      <td>QB</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>00-0036991</td>\n",
       "      <td>Amari</td>\n",
       "      <td>Rodgers</td>\n",
       "      <td>WR</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1077</th>\n",
       "      <td>00-0036222</td>\n",
       "      <td>Isaiah</td>\n",
       "      <td>Rodgers</td>\n",
       "      <td>CB</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>00-0031384</td>\n",
       "      <td>Richard</td>\n",
       "      <td>Rodgers</td>\n",
       "      <td>TE</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       player_id first_name last_name depth_chart_position  years_exp\n",
       "962   00-0023459      Aaron   Rodgers                   QB         17\n",
       "1063  00-0036991      Amari   Rodgers                   WR          1\n",
       "1077  00-0036222     Isaiah   Rodgers                   CB          2\n",
       "1456  00-0031384    Richard   Rodgers                   TE          8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>depth_chart_position</th>\n",
       "      <th>years_exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1270</th>\n",
       "      <td>00-0033873</td>\n",
       "      <td>Patrick</td>\n",
       "      <td>Mahomes</td>\n",
       "      <td>QB</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       player_id first_name last_name depth_chart_position  years_exp\n",
       "1270  00-0033873    Patrick   Mahomes                   QB          5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>depth_chart_position</th>\n",
       "      <th>years_exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>00-0035248</td>\n",
       "      <td>Zachary</td>\n",
       "      <td>Allen</td>\n",
       "      <td>DE</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>00-0034857</td>\n",
       "      <td>Joshua</td>\n",
       "      <td>Allen</td>\n",
       "      <td>QB</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2160</th>\n",
       "      <td>00-0034335</td>\n",
       "      <td>Marcus</td>\n",
       "      <td>Allen</td>\n",
       "      <td>ILB</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2561</th>\n",
       "      <td>00-0033523</td>\n",
       "      <td>Jonathan</td>\n",
       "      <td>Allen</td>\n",
       "      <td>DT</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       player_id first_name last_name depth_chart_position  years_exp\n",
       "18    00-0035248    Zachary     Allen                   DE          3\n",
       "311   00-0034857     Joshua     Allen                   QB          4\n",
       "...          ...        ...       ...                  ...        ...\n",
       "2160  00-0034335     Marcus     Allen                  ILB          4\n",
       "2561  00-0033523   Jonathan     Allen                   DT          5\n",
       "\n",
       "[14 rows x 5 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get relevant player data\n",
    "# subset for relevant columns\n",
    "playcols = ['player_id','first_name','last_name','depth_chart_position','years_exp']\n",
    "players = players[playcols]\n",
    "# manipulate for abbreviated name\n",
    "display(players[players.last_name == 'Rodgers'])\n",
    "display(players[players.last_name == 'Mahomes'])\n",
    "display(players[players.last_name == 'Allen'])\n",
    "\n",
    "pass_col = ['play_type','yards_gained','pass_length','pass_location','yards_after_catch','incomplete_pass',\n",
    "            'interception','rush_attempt','pass_attempt','touchdown','pass_touchdown','rush_touchdown',\n",
    "            'return_touchdown','fumble','complete_pass','passer_player_id','passer_player_name','passing_yards',\n",
    "            'receiver_player_id','weather','sack','receiving_yards','drive_ended_with_score','roof','surface',\n",
    "            'game_stadium','ydstogo','passer','passer_id','defenders_in_box','fourth_down_failed',\n",
    "            'first_down','penalty','penalty_type','spread_line','total_line','posteam', 'week', \n",
    "            'home_opening_kickoff','first_down_rush','rush_attempt','rush_touchdown','lateral_rush',\n",
    "            'rusher_player_id','rusher_player_name','rushing_yards','lateral_rusher_player_id',\n",
    "            'lateral_rusher_player_name','lateral_rushing_yards','rusher','rusher_jersey_number',\n",
    "            'rush','rusher_id','number_of_pass_rushers', 'pass_oe']\n",
    "# etc."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47ec70c2",
   "metadata": {},
   "source": [
    "#### https://www.espn.com/nfl/player/gamelog/_/id/8439/aaron-rodgers \n",
    "##### AARON RODGERS ESPN STATS ; MIMIC TO ENSURE WORKING\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8833cd18",
   "metadata": {
    "code_folding": [],
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first_down_rush\n",
      "rush_attempt\n",
      "rush_touchdown\n",
      "lateral_rush\n",
      "rusher_player_id\n",
      "rusher_player_name\n",
      "rushing_yards\n",
      "lateral_rusher_player_id\n",
      "lateral_rusher_player_name\n",
      "lateral_rushing_yards\n",
      "rusher\n",
      "rusher_jersey_number\n",
      "rush\n",
      "rusher_id\n",
      "number_of_pass_rushers\n"
     ]
    }
   ],
   "source": [
    "# try to find relevant columns\n",
    "for col in pbp.columns:\n",
    "    if 'rush' in (col):\n",
    "        print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e61d8983",
   "metadata": {
    "code_folding": [
     3,
     5
    ],
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# def filter_by_player(df,pid):\n",
    "# input df : (pd.df) df pf yearly pbp data to filter through\n",
    "# input pid : (str) player_id\n",
    "def filter_by_player(df, pid, pass_col):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    try : \n",
    "        # get rows where inputted df has the player's id 'pid' in a column/row element\n",
    "        pid_plays = df[df.apply(lambda x: any(value == pid for value in x.values), axis=1)]\n",
    "        # prepare df with summary of stats for pid for each week of season x\n",
    "        pid_byweek = pd.DataFrame(columns = ['cmp', 'patt', 'pyds', 'ptd', 'int', 'sack', 'rating', 'ratt', 'ryds', 'rtd'])\n",
    "    #     rel_weeks = np.linspace(1,np.max(pid_plays.week),np.max(pid_plays.week), dtype=int)\n",
    "        return pid_plays\n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "be69bdb2",
   "metadata": {
    "code_folding": [
     6
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31m18\u001b[0m\n",
      "ESPN cmp : 19.0\n",
      "ESPN att : 33.0\n",
      "ESPN yds : 254.0\n",
      "ESPN cmp% : 57.57575757575758\n",
      "ESPN avg : 7.696969696969697\n",
      "ESPN td (pass): 3.0\n",
      "ESPN int : 1.0\n",
      "ESPN lng : 49.0\n",
      "ESPN sack : 2.0\n",
      "ESPN car : 9.0\n",
      "ESPN yds (rush) : 16.0\n",
      "ESPN avg (rush) : 1.7777777777777777\n",
      "ESPN td (rush) : 0.0\n",
      "ESPN lng (rush) : 7.0\n",
      "\u001b[31m17\u001b[0m\n",
      "Error in \u001b[34mfilter_by_player_2\u001b[0m ; throws\n",
      "\u001b[31mzero-size array to reduction operation maximum which has no identity\u001b[0m on line 20\n",
      "STILL RAN THO\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Rafal Adamczyk\\AppData\\Local\\Temp\\ipykernel_9220\\3423355404.py:16: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  cmp_pct = cmp/patt*100 #DIFFERENT\n",
      "C:\\Users\\Rafal Adamczyk\\AppData\\Local\\Temp\\ipykernel_9220\\3423355404.py:17: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  pavg = pyrd/patt #DIFFERENT\n"
     ]
    }
   ],
   "source": [
    "def filter_by_player_2(pid_plays, pass_col):\n",
    "    function_name = sys._getframe().f_code.co_name ;\n",
    "    try : \n",
    "        # get list of weeks where player played\n",
    "        rel_weeks = [18,17] # set to last 2 weeks for convenience\n",
    "#         rel_weeks = [17]\n",
    "        for w in rel_weeks:\n",
    "            # get all plays involving player on week w\n",
    "            pid_week = pid_plays[pid_plays.week == w]\n",
    "            print( red(w) )\n",
    "\n",
    "            # get same stats as ESPN website\n",
    "            cmp = np.sum(pid_week.complete_pass) #GOOD\n",
    "            patt = np.sum(pid_week.pass_attempt.values) #DIFFERENT\n",
    "            pyrd = np.sum(pid_week.passing_yards.fillna(0).values) #GOOD\n",
    "            cmp_pct = cmp/patt*100 #DIFFERENT\n",
    "            pavg = pyrd/patt #DIFFERENT\n",
    "            ptd = np.sum(pid_week.pass_touchdown.values) #GOOD\n",
    "            interception = np.sum(pid_week.interception.values) #GOOD\n",
    "            plng = np.max(pid_week.passing_yards.fillna(0).values) #GOOD\n",
    "            sack = np.sum(pid_week.sack.fillna(0).values) #GOOD\n",
    "            ratt = np.sum(pid_week.rush_attempt.values) #GOOD\n",
    "            ryrd = np.sum(pid_week.rushing_yards.fillna(0).values) #GOOD\n",
    "            ravg = ryrd/ratt #DIFFERENT\n",
    "            rtd = np.sum(pid_week.rush_touchdown.values) #GOOD\n",
    "            rlng = np.max(pid_week.rushing_yards.fillna(0).values) #GOOD\n",
    "            # get yards gained            \n",
    "            yg = np.sum( np.abs(pid_week.yards_gained.values) )\n",
    "            # replace nans with 0's to sum properly ; YAC relevant to receivers, not QB necessarily\n",
    "            yac = np.sum(pid_week.yards_after_catch.fillna(0).values)\n",
    "            \n",
    "            print( f'ESPN cmp : {cmp}' )\n",
    "            print( f'ESPN att : {patt}' )\n",
    "            print( f'ESPN yds : {pyrd}' )\n",
    "            print( f'ESPN cmp% : {cmp_pct}' )\n",
    "            print( f'ESPN avg : {pavg}' )\n",
    "            print( f'ESPN td (pass): {ptd}' )\n",
    "            print( f'ESPN int : {interception}' )\n",
    "            print( f'ESPN lng : {plng}' )\n",
    "            print( f'ESPN sack : {sack}' )\n",
    "            \n",
    "            print( f'ESPN car : {ratt}' )\n",
    "            print( f'ESPN yds (rush) : {ryrd}' )\n",
    "            print( f'ESPN avg (rush) : {ravg}' )\n",
    "            print( f'ESPN td (rush) : {rtd}' )\n",
    "            print( f'ESPN lng (rush) : {rlng}' )\n",
    "            \n",
    "    except Exception as e: \n",
    "        exc_type, exc_obj, exc_tb = sys.exc_info()\n",
    "        cmp = np.nan ; patt = np.nan ; pyrd = np.nan ; cmp_pct = np.nan ; pavg = np.nan;\n",
    "        ptd = np.nan ; interception = np.nan ; plng = np.nan ; sack = np.nan ; ratt = np.nan;\n",
    "        ryrd = np.nan ; ravg = np.nan ; rtd = np.nan ; rlng = np.nan ;\n",
    "        print(f'Error in {blue(function_name)} ; throws\\n{red(e)} on line {exc_tb.tb_lineno}')\n",
    "            \n",
    "# aaron rodgers            \n",
    "# pid_plays = filter_by_player(pbp,'00-0023459',pass_col)\n",
    "# mahomes            \n",
    "# pid_plays = filter_by_player(pbp,'00-0033873',pass_col)\n",
    "# josh allen           \n",
    "# pid_plays = filter_by_player(pbp,'00-0034857',pass_col)\n",
    "\n",
    "# filter_by_player(pbp,'00-0036222',pass_col) \n",
    "# ex1 with Aaron Rodgers ; ex2 with Isaiah Rodgers\n",
    "filter_by_player_2( pid_plays , pass_col )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61bca5ba",
   "metadata": {
    "code_folding": [
     0
    ],
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# # print all colymns\n",
    "# for c in pbp.columns:\n",
    "#     print(c, end = '   ;   ')\n",
    "# for row in pbp.tail(1).iloc:\n",
    "#     # 300 column and dozens of NaN's ; remove all when trying to learn df\n",
    "#     # display row by row neatly \n",
    "#     row = pd.DataFrame(row).transpose()\n",
    "#     display(row)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
